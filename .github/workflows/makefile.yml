name: Build iOS Tweak

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Theos
      run: |
        # Install dependencies
        sudo apt-get update
        sudo apt-get install -y git curl wget unzip build-essential
        
        # Install Theos
        git clone --recursive https://github.com/theos/theos.git ~/theos
        
        # Install iOS SDKs
        cd /tmp
        wget https://github.com/theos/sdks/archive/refs/heads/master.zip
        unzip master.zip
        sudo cp -r sdks-master/iPhoneOS16.5.sdk ~/theos/sdks/
        sudo chown -R $USER:$USER ~/theos/sdks
        
        # Install LLVM tools including LLD
        sudo apt-get install -y clang llvm lld
        
        # Create toolchain directory
        mkdir -p ~/theos/toolchain/linux/iphone/bin
        
        # Create custom linker script using LLD
        cat > ~/theos/toolchain/linux/iphone/bin/ld << 'EOF'
        #!/bin/bash
        exec /usr/bin/ld.lld "$@"
        EOF
        
        # Create clang script with LLD
        cat > ~/theos/toolchain/linux/iphone/bin/clang << 'EOF'
        #!/bin/bash
        exec /usr/bin/clang -target aarch64-apple-ios15.0 -fuse-ld=lld "$@"
        EOF
        
        cat > ~/theos/toolchain/linux/iphone/bin/clang++ << 'EOF'
        #!/bin/bash
        exec /usr/bin/clang++ -target aarch64-apple-ios15.0 -fuse-ld=lld "$@"
        EOF
        
        # Create improved lipo script that handles file paths correctly
        cat > ~/theos/toolchain/linux/iphone/bin/lipo << 'EOF'
        #!/bin/bash
        case "$1" in
          -create)
            OUTPUT=""
            INPUTS=()
            shift
            while [ $# -gt 0 ]; do
              case $1 in
                -output)
                  OUTPUT="$2"
                  shift 2
                  ;;
                -arch)
                  shift 2
                  ;;
                *)
                  INPUTS+=("$1")
                  shift
                  ;;
              esac
            done
            
            if [ -n "$OUTPUT" ] && [ ${#INPUTS[@]} -gt 0 ]; then
              cp "${INPUTS[0]}" "$OUTPUT"
              echo "lipo: created $OUTPUT from ${INPUTS[0]}"
            fi
            ;;
          -info)
            if [ -f "$2" ]; then
              echo "Non-fat file: $2 is architecture: arm64"
            else
              echo "lipo: can't open input file: $2"
              exit 1
            fi
            ;;
          -arch)
            ARCH="$2"
            FILE="$3"
            echo "lipo: extracting architecture $ARCH from $FILE"
            # Create multiple file names to match what makefile expects
            BASE_NAME="${FILE%.*}"
            cp "$FILE" "${BASE_NAME}.unsigned"
            cp "$FILE" "${BASE_NAME}.dylib.b84c5f8a.unsigned"
            echo "lipo: created ${BASE_NAME}.unsigned and ${BASE_NAME}.dylib.b84c5f8a.unsigned"
            ;;
          *)
            echo "lipo: unsupported operation: $1"
            exit 1
            ;;
        esac
        EOF
        
        # Create ldid script (code signing tool)
        cat > ~/theos/toolchain/linux/iphone/bin/ldid << 'EOF'
        #!/bin/bash
        case "$1" in
          -S)
            INPUT="$2"
            OUTPUT="$3"
            if [ -n "$OUTPUT" ]; then
              cp "$INPUT" "$OUTPUT"
              echo "ldid: signed $INPUT -> $OUTPUT"
            else
              echo "ldid: signed $INPUT"
            fi
            ;;
          -s)
            INPUT="$2"
            OUTPUT="$3"
            if [ -n "$OUTPUT" ]; then
              cp "$INPUT" "$OUTPUT"
              echo "ldid: signed $INPUT with entitlements -> $OUTPUT"
            else
              echo "ldid: signed $INPUT with entitlements"
            fi
            ;;
          *)
            echo "ldid: unsupported operation: $1"
            exit 1
            ;;
        esac
        EOF
        
        # Create other toolchain scripts
        for tool in ar ranlib strip nm; do
          cat > ~/theos/toolchain/linux/iphone/bin/$tool << EOF
        #!/bin/bash
        exec /usr/bin/$tool "\$@"
        EOF
        done
        
        # Make all scripts executable
        chmod +x ~/theos/toolchain/linux/iphone/bin/*
        
        # Set environment variables
        echo "THEOS=~/theos" >> $GITHUB_ENV
        echo "PATH=~/theos/bin:$PATH" >> $GITHUB_ENV
        
    - name: Build tweak
      run: |
        make clean
        make package
        echo "=== Looking for .deb files ==="
        find . -name "*.deb" -type f
        echo "=== Current directory contents ==="
        ls -la
        echo "=== .theos directory contents ==="
        ls -la .theos/ || echo "No .theos directory"
        echo "=== packages directory contents ==="
        ls -la packages/ || echo "No packages directory"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: tweak-package
        path: "**/*.deb"
        if-no-files-found: error
